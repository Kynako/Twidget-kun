{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "desktop"
  },
  "name" : "Twidget-kun",
  "script" : "\/* \n * Twidget-kun.js\n * Author: Kynako\n * dependencies:\n   - Twista.js\n     - Twista.js is wrriten by Kynako.\n     - license: https:\/\/guthub.com\/Kynako\/Twista-js\/blob\/main\/LICENSE\n   - cache.js\n     - cache.js is wrritem by EvanDColeman.\n     - license: https:\/\/github.com\/evandcoleman\/scriptable\/blob\/main\/LICENSE\n *\/\n\/* Environmental variables *\/\nconst ENV = {\n  CK: '__consumer_key__',\n  CS: '__consumer_secret_key__',\n  AT: '__access_token__',\n  AS: '__access_token_secret__'\n};\n\n\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-gray; icon-glyph: cube;\n\/*!\n * Ginit.js\n *\n * Copyright (c) 2021 Kynako\n *\n * This software is released under the MIT license.\n * https:\/\/github.com\/Kynako\/Ginit\/blob\/main\/LICENSE\n*\/\nclass Ginit {\n  constructor(){\n    this.fm = FileManager.iCloud();\n    this.base = 'https:\/\/raw.githubusercontent.com\/'\n  };\n  \n  async set(list, parent, hierarky=0){\n    let tab = '  '.repeat(hierarky)\n    for(let data of list){\n      if(typeof data === 'object'){\n        console.warn(`${tab}${data.dir}`)\n        let familly = parent + data.dir;\n        if(!this.fm.fileExists(familly)){\n          fm.createDirectory(familly, false);\n        };\n        await this.set(\n          data.list,\n          parent + data.dir,\n          hierarky + 1\n        );\n      } else if(typeof data === 'string'){\n        console.warn(`${tab}${data}`)\n        let fileName = this.fm.fileName(data, true);\n        let filePath = parent + fileName;\n        if(!this.fm.fileExists(filePath)){\n          console.log(`${tab}NOT EXISTS`);\n          await this._load(data, parent, tab);\n        };\n        console.log(`${tab}EXISTS`);\n      } else {\n        console.error('Error');\n      };\n    }\n  };\n  \n  async _load(data, parent, tab){\n    try {\n      let url = this.base + data;\n      console.log(`${tab}url: ${url}`)\n      let r = new Request(url);\n      let res = await r.load();\n      if(r.response.statusCode >= 400){\n        throw this._pj(r.response);\n      }\n      let fileName = this.fm.fileName(data, true);\n      console.log(`${tab}${parent+fileName}`);\n      this.fm.write(parent+fileName, res)\n    } catch (e) {\n      console.error(e)\n    }\n      \n  };\n  \n  _pj(value){\n    return JSON.stringify(value, null, 2);\n  }\n};\n\n\/\/ =================================================\n\nconst repo = 'Kynako\/Twidget-kun\/main\/';\nconst list = [\n  `${repo}Twidget-kun.js`,\n  {\n    dir: 'Twidget-kun\/',\n    list: [  \n      {\n        dir: 'modules\/',\n        list: [\n          `${repo}modules\/cache.js`,\n          `${repo}modules\/Twista.js`,\n          `${repo}modules\/crypto-js.min.js`\n        ]\n      },\n      {\n        dir: 'caches\/',\n        list: []\n      }\n    ]\n  }\n];\n\n\/\/ ==================================================\nconst fm = FileManager.iCloud();\nconst dirPath = fm.joinPath(\n  fm.documentsDirectory(), 'Twidget-kun\/'\n);\nif(!fm.fileExists(dirPath)){\n  fm.createDirectory(dirPath, false);\n  await saveEnv()\n};\nconst ginit = new Ginit();\nawait ginit.set(list, fm.documentsDirectory()+'\/')\n\/\/ ==================================================\nconst CONFIG = {\n  screen_name: args.widgetParameter || 'Twitter',\n};\nconst isUDA = Device.isUsingDarkAppearance()\nconst COLOR = {\n  black: new Color('14171A'),\n  blue: new Color('1DA1F2'),\n  darkgray: new Color('657786'),\n  lightgray: new Color('AAB8C2'),\n  e1_lightgray: new Color('E1E8ED'),\n  e2_lightgray: new Color('F5F8FA'),\n  white: new Color('F5F8FA')\n};\nconst DARKCOLOR = {\n  blue: COLOR.blue,\n  bg: COLOR.black,\n  text: COLOR.white,\n  subtext: COLOR.darkgray\n};\nconst LIGHTCOLOR = {\n  blue: COLOR.blue,\n  bg: COLOR.white,\n  text: COLOR.black,\n  subtext: COLOR.darkgray\n};\nconst APPEARANCE = isUDA ? DARKCOLOR : LIGHTCOLOR;\n\/\/ ==================================================\nconsole.json = (value) => {\n  console.log(JSON.stringify(value, null, 2))\n}\n\nconst CryptoJS = importModule('modules\/crypto-js.min')\nconst Twista = importModule('Twidget-kun\/modules\/Twista')\nconst tw = new Twista(\n  ENV, \n  function(base, key){\n    return CryptoJS.enc.Base64.stringify(\n      CryptoJS.HmacSHA1(base, key)\n    );\n  }\n);\n\/\/ ==================================\nconst Cache = importModule('Twidget-kun\/modules\/cache')\nconst cache = new Cache(`Twidget-kun\/caches` );\nconst DATA = await getUserData('Twidget-kun', 30)\nconsole.json(DATA.json);\n\nasync function getUserData(name, expirationMinutes){\n  let cacheKey = CONFIG.screen_name\n  let cachedUserData = await cache.read(\n    cacheKey, expirationMinutes\n  )\n  if(cachedUserData == null || cachedUserData.json.screen_name != CONFIG.screen_name){\n    \/\/ hasn't existed yet\n    console.log('Loading user data...')\n    let res = await tw.requestJson(\n      'GET',\n      'users\/show.json',\n      {screen_name: CONFIG.screen_name}\n    )\n    cache.write(cacheKey, res)\n    return res\n  } else {\n    \/\/ has existed\n    console.log('Using user cache...')\n    return cachedUserData\n  };\n};\n\n\/\/ ===================================================\nawait getBackgroundImageAtBannerUrl(DATA.json.profile_banner_url)\n\nlet widget = null\nif (config.runsInWidget) {\n  widget = await createMediumWidget(DATA.json)\n  Script.setWidget(widget)\n  Script.complete()\n} else if (config.runsWithSiri) {\n    widget = await createWidget(USER);\n    await widget.presentMedium();\n    Script.complete()\n} else {\n  presentMenu(widget)\n};\n\nasync function presentMenu(widget) {\n  let alert = new Alert()\n  alert.title = 'Twidget-kun v1';\n  alert.addAction('Show USER Data');\n  alert.addAction('View Widget');\n  alert.addCancelAction(\"Cancel\");\n  let idx = await alert.presentSheet();\n  switch(idx) {\n    case 0: QuickLook.present(DATA); break;\n    case 1: {\n      let widget = await createMediumWidget(DATA.json);\n      await widget.presentMedium()\n      break;\n    };\n  };\n};\n\n\/\/ ===========================================\nasync function createMediumWidget(USER){\n  const w = new ListWidget();\n  w.backgroundColor = Color.orange()\n\n  const entireSt = w.addStack();\n  entireSt.size = new Size(329, 155);\n  entireSt.layoutVertically();\n  \n  \/\/ w - entire -  up\n  const upSt = entireSt.addStack();\n  upSt.backgroundColor = APPEARANCE.bg;\n  upSt.size = new Size(329, 155\/2*1-0.5)\n  upSt.layoutHorizontally();\n  \n  const iconSt = upSt.addStack();\n  iconSt.backgroundColor = APPEARANCE.bg;\n  const icon = await getIconAtUrl(USER.profile_image_url);\n  iconSt.size = new Size(\n    upSt.size.height, upSt.size.height\n  );\n  iconSt.setPadding(10, 10, 10, 10);\n\n  const iconImg = iconSt.addImage(icon);\n  \n  \/\/ w - up - userName\n  const userNameSt = upSt.addStack();\n  userNameSt.setPadding(20, 5, 5, 5)\n  userNameSt.layoutVertically()\n  userNameSt.backgroundColor = APPEARANCE.bg\n  userNameSt.size = new Size(\n    329-iconSt.size.width, upSt.size.height\n  );\n  \n  const nameSt = userNameSt.addStack();\n  nameSt.layoutHorizontally()\n  name = nameSt.addText(USER.name)\n  name.font = Font.boldSystemFont(24);\n  name.textColor = APPEARANCE.text\n  \n  const screenNameSt = userNameSt.addStack();\n  screenName = screenNameSt.addText('@'+USER.screen_name);\n  screenName.font = Font.systemFont(18);\n  screenName.textColor = APPEARANCE.subtext\n  screenNameSt.addSpacer()\n  userNameSt.addSpacer()\n  \n  \/\/ w - entire - entireSeparator\n  const entireSeparatorSt = entireSt.addStack()\n  entireSeparatorSt.size = new Size(329, 1);\n  entireSeparatorSt.backgroundColor = APPEARANCE.blue\n  \n  \/\/ w - extire - down\n  const downSt = entireSt.addStack();\n  downSt.layoutHorizontally();\n  downSt.size = new Size(\n    329, 155-upSt.size.height\n  );\n  downSt.backgroundColor = APPEARANCE.bg\n  \n  const lInfoSt = downSt.addStack();\n  lInfoSt.layoutVertically()\n  lInfoSt.setPadding(10, 15, 10, 10)\n  lInfoSt.backgroundColor = APPEARANCE.bg\n  lInfoSt.size = new Size(\n    329\/2-1, 155-upSt.size.height\n  );\n  const lItems = [\n    [USER.followers_count, 'Followers'],\n    [USER.friends_count, 'Following'],\n\n  ];\n  addInfo(lInfoSt, lItems)\n  \n  const separatorSt = downSt.addStack();\n  separatorSt.backgroundColor = APPEARANCE.blue\n  separatorSt.size = new Size(\n    1, 155-upSt.size.height\n  );\n  \n  const rInfoSt = downSt.addStack();\n  rInfoSt.layoutVertically();\n  rInfoSt.setPadding(10, 15, 10, 10);\n  rInfoSt.backgroundColor = APPEARANCE.bg\n  rInfoSt.size = new Size(\n    329\/2, 155-upSt.size.height\n  );\n  const rItems = [\n    [USER.statuses_count, 'Tweets'],\n    [USER.favourites_count, 'Favorites']\n  ];\n  addInfo(rInfoSt, rItems)\n  \n  return w;\n};\n\nasync function getIconAtUrl(imageUrl){\n  const toUseUrl = imageUrl.replace(\/_normal\/, '')\n  const r = new Request(toUseUrl);\n  const icon = await r.loadImage();\n  const dc = new DrawContext();\n  const width  = icon.size.width,\n        height = icon.size.height\n  dc.size = icon.size;\n  dc.opaque = true\n  \/\/ draw icon\n  dc.drawImageAtPoint(icon, new Point(0, 0))\n  \/\/ draw mask\n  dc.setStrokeColor(APPEARANCE.bg)\n  let outline_width = Math.sqrt(2)*(width-1)\/2\n  dc.setLineWidth(outline_width)\n  dc.strokeEllipse(\n    new Rect(\n      0-outline_width\/2, 0-outline_width\/2, width+outline_width, width+outline_width\n  ))\n  return dc.getImage();\n};\n\nasync function getBackgroundImageAtBannerUrl(imageUrl){\n  const r = new Request(imageUrl);\n  const bannerImg = await r.loadImage();\n\/\/   QuickLook.present(bannerImg, false);\n  return bannerImg\n}\n\nfunction addInfo(stack, itemArray){\n  for(let item of itemArray){\n    let itemSt = stack.addStack();\n    itemSt.layoutHorizontally()\n    \/\/ count\n    let countSt = itemSt.addStack();\n    countSt.layoutVertically()\n    let count = countSt.addText(item[0].toString());\n    count.font = Font.systemFont(16);\n    count.textColor = APPEARANCE.text;\n    \/\/ unit\n    let unitSt = itemSt.addStack();\n    unitSt.layoutVertically()\n    unitSt.addSpacer(16-13)\n    let unit = unitSt.addText(' '+item[1].toString());\n    unit.font = Font.systemFont(13)\n    unit.textColor = APPEARANCE.subtext;\n  };\n};",
  "share_sheet_inputs" : [

  ]
}